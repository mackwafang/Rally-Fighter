<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_kinetic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = 1;
carType = choose(0,1);
carShadow = irandom(2);
nearest = -1;
if(carType == 1) {carShadow = 3;}
carID = 0;
carR = irandom(255);
carB = irandom(255);
carG = irandom(255);
carColor = make_color_rgb(carR,carB,carG);
spd = 0;
gear = 1;
gearMod = 0;
canMove = true;
friction = 0.05;
turnSpeed = 1.5;
boost = false;
boostTime = 0;
maxBoostTime = 120;
accelerate = true;
brake = false;
bump = false;
bumpScore = 0;
waitBump = 0;
condition = 25;
turn = 0;
imageIndex = 0;
showDirection = false;
chase = false;
global.rank[carID,0] = obj_finish_line.y-y;
global.rank[carID,1] = carID;
displayAlpha = 0;
placement = 0;
prevMark[0] = -1;
prevMark[1] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.rank[carID,0] = obj_finish_line.y-y;
global.rank[carID,1] = carID;
y += background_vspeed[0]-spd;
spd *= canMove;
var bonusAcc;
if(carType == 0){
    bonusAcc = 1;
}
else {
    bonusAcc = 1.3;
}
if(!instance_exists(obj_ready) &amp;&amp; y &gt; obj_finish_line.y){
    if(spd &lt; global.maxSpeed){
        spd += (sin(degtorad(0.6/(gear*0.5)))*(2.35-friction))*bonusAcc;
    }
}
else if (y &lt; obj_finish_line.y){
    brake = true;
    condition = 25;
}
if(spd &lt;= 0) {spd = 0}
hspeed = clamp(hspeed,-turnSpeed,turnSpeed);
image_angle = -hspeed*6
gear = (spd div 4)+1;
gear = clamp(gear,1,6);
if(y &lt; 0 || y &gt; room_height){
    if(irandom(global.difficulty*500) &lt; 1 &amp;&amp; spd &gt; 0){
        condition = 0;
    }
}
//x = clamp(x,obj_wall.x+9,obj_wall2.x-9);
/************** Remove Bump bonus ***************/
if(bump &gt; 0){
    if(waitBump &lt; 210){
        waitBump++;
    }
    else{
        bump = 0;
    }
}
if (brake | abs(hspeed) == turnSpeed) {
    switch(carType) {
        case 0:
            var o = instance_create(x+4,y,obj_tire_mark);
            if (prevMark[0] != -1) {
                o.to = prevMark[0];
            }
            prevMark[0] = o;
            var o2 = instance_create(x-4,y,obj_tire_mark);
            if (prevMark[1] != -1) {
                o2.to = prevMark[1];
            }
            prevMark[1] = o2;
            break;
        case 1:
            var o = instance_create(x,y,obj_tire_mark);
            if (prevMark[0] != -1) {
                o.to = prevMark[0];
            }
            prevMark[0] = o;
            break;
    }
}
else {
    prevMark[0] = -1;
    prevMark[1] = -1;
}
bumpScore = (bump*50)+100;
/************** Boost ***************/
if(irandom(400) &lt; (placement+global.difficulty)){
    if(spd &gt; 2){
        boost = true;
    }
}
if(boost){
    if(boostTime &gt; 0){
        boostTime --;
        spd += sin(degtorad(0.7)*(2.35-friction));
    }
    else{
        boost = false;
    }
}
else{
    if(boostTime &lt; 60) {boostTime ++;}
}
/************** Move to block passing ***************/
if(bump &lt;= 0){
    var minTo, maxTo;
    switch(getRoadWidth(obj_road.image_index)) {
        case 0:
            minTo = -46;
            maxTo = 46;
            break;
        case 1:
            minTo = -70;
            maxTo = 46;
            break;
        case -1:
            minTo = -46;
            maxTo = 70;
            break;
        case 2:
            minTo = -94;
            maxTo = 46;
            break;
        case -2:
            minTo = -46;
            maxTo = 94;
            break;
        case 3:
            minTo = -148;
            maxTo = -48;
            break;
        case -3:
            minTo = 48;
            maxTo = 148;
            break;
    }
    var goTo = roadInitialX+irandom_range(minTo,maxTo);
    if (!place_meeting(x,y,obj_road)) {
        hspeed += sign(goTo-x)*0.3;
    }
    else {
        if (collision_rectangle(x+6,y+10,x+32,y+40+(spd*2),obj_kinetic,false,true) || collision_rectangle(x-32,y-10,x-6,y-40-(spd*2),obj_kinetic,false,true)){
            hspeed += 0.1;
        }
        if (collision_rectangle(x-32,y+10,x-6,y+40+(spd*2),obj_kinetic,false,true) || collision_rectangle(x+6,y-10,x+32,y-40-(spd*2),obj_kinetic,false,true)){
            hspeed -= 0.1;
        }
    }
    /*if(hspeed == 0){
        if (collision_line(x,y,x+32,y,obj_wall2,false,true)) {hspeed -= 0.3;}
        if(global.isMedian){
            if (collision_line(x-32,y,x,y,obj_wall,false,true)){
                hspeed += 0.3;
            }
        }
        else{
            if (x &lt; (obj_wall.x+obj_wall2.x)/2){
                hspeed += 0.3;
            }
        }
    }*/
}
/************** Destroyed ***************/
if(condition &lt;= 0){
    instance_destroy();
    if(bump &gt; 0){
        score += 500*bump;
        with(instance_create(x,y,obj_score_ind)){
            word = string(500*other.bump);
        }
    }
    with(instance_create(x,y,obj_car_explosion)){
        carType = other.carType;
        carShadow = other.carShadow;
        carColor = other.carColor;
        carID = other.carID;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_npc_racer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(direction,1);
condition -= abs(hspeed)+2;
other.condition -= abs(hspeed)+2;
if(bump &gt; 0){
    bump ++;
    score += bumpScore;
    with(instance_create(x,y,obj_score_ind)){
        word = string(other.bumpScore);
    }
}
if (spd &lt; other.spd){
    if(y &lt; other.y+8 || y &gt; other.y-8){
        hspeed = (x-other.x)/2;
        other.hspeed = -(x-other.x)/2;
        spd += 1;
        other.spd -= 1;
    }
    else{
        hspeed = other.hspeed*1.5;
        other.hspeed *= -1.5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(direction,3);
hspeed *= -0.5;
condition -= 2+abs(hspeed)*2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(direction,3);
hspeed *= -0.5;
condition -= 2+abs(hspeed)*2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(direction,3);
condition -= abs(hspeed)+2;
if(other.invisi &lt;= 0){
    other.condition -= abs(hspeed)+1+global.difficulty;
}
bump ++;
score += bumpScore;
var ind = instance_create(x,y,obj_score_ind);
ind.word = string(bumpScore);
if(y &lt; other.y+8){
    hspeed = (x-other.x)/2;
    other.hspeed = -(x-other.x)/2;
    spd += 1;
    other.spd -= 1;
}
else if (y &gt; other.y-8){
    hspeed = (x-other.x)/2;
    other.hspeed = -(x-other.x)/2;
    spd -= 1;
    other.spd += 1;
}
else{
    hspeed = other.hspeed*1.5;
    other.hspeed *= -1.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*draw_set_font(global.gameFont);
imageIndex ++;
draw_set_halign(fa_center);
if(y &lt; 0 || y &gt; room_height){
    for(i = 0; i &lt; array_height_2d(global.srtRank); i++){
        if(global.srtRank[i,1] = carID){
            var dist = round(abs(y-256)*pixelDistance/10);
            if (i == global.placement+1){
                draw_sprite_ext(spr_lead,imageIndex mod 11,x*2,630,2,2,0,white,1);
                draw_set_valign(fa_bottom);
                draw_text_transformed_colour(x*2,625,string(dist)+"m",2,2,0,white,white,white,white,1);
            }
            else if (i == global.placement-1){
                draw_sprite_ext(spr_lead,imageIndex mod 11,x*2,10,2,-2,0,white,1);
                draw_set_valign(fa_top);
                draw_text_transformed_colour(x*2,15,string(dist)+"m",2,2,0,white,white,white,white,1);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_car(spr_player,carType);
draw_rectangle_colour(x-4,y+10,x+5,y+12,0,0,0,0,false);
draw_rectangle_colour(x-3,y+11,x-3+((condition/25)*7),y+11,green,green,green,green,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
