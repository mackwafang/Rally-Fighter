<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_kinetic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = 1;
carType = global.carType;
carShadow = irandom(2);
if(carType == 1) {carShadow = 3;}
carColor = global.carColor;
canMove = true;
carID = 0;
spd = 0;
revSpd = 0; //For car pitch sound
nextGear = 0;
nextGearInt = 60;
gear = 1;
waitTime = 0;
friction = 0.05;
turnSpeed = 1.5;
boost = false;
boostRegen = 0;
accelerate = false;
brake = false;
invisi = 120;
sound = -1;
turn = 0;
cruising = 0;
snd_hit1 = snd_car_hit1;
condition = global.maxCondition;
prevMark[0] = -1;
prevMark[1] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//health = 100;
global.rank[carID,0] = obj_finish_line.y-y;
global.rank[carID,1] = carID;
depth = -x;
if (spd &gt; 0){
    if(keyboard_check(vk_left)){
        //if(!place_meeting(x-6,y,obj_wall)){
            hspeed -= 0.2;
        //}
    }
    if(keyboard_check(vk_right)){
        //if(!place_meeting(x+6,y,obj_wall2)){
            hspeed += 0.2;
        //}
    }
}
hspeed = clamp(hspeed,-turnSpeed,turnSpeed);
image_angle = -hspeed*6;
health -= 0.005;
if(invisi &gt; 0) {
    invisi --;
}
image_alpha = abs((invisi/10 mod 2)-1);
if(instance_exists(obj_ready)){
    spd = 0;
    accelerate = false;
    boost = false;
    brake = true;
}
/************ Cruising Bonus ************/
if(spd &gt; global.difficulty/2){
    if(cruising &gt;= 600){
        cruising = 0;
        global.difficulty += 0.05;//(abs(spd-180)*0.00005);
        score += round(1000*global.startingDifficulty);
        with(instance_create(x,y-16,obj_score_ind)){
            word = round(1000*global.startingDifficulty);
        }
    }
    else{
        cruising ++;
    }
}
/************ Accelerate ************/
var bonusAcc;
if(carType == 0){
    bonusAcc = 1;
}
else {
    bonusAcc = 1.3;
}
if(keyboard_check(ord("Z"))) {accelerate = true;}
else if(keyboard_check_released(ord("Z"))){accelerate = false;}
var roadPenalty = 1;
if (!place_meeting(x,y,obj_road)) {
    roadPenalty = 0.75;
}
var accelRate = 0;
if(accelerate){
    if(spd &lt; global.maxSpeed){
        //acceleration
        accelRate = (sin(degtorad(0.6/(gear*0.5)))*(2.35-friction))*bonusAcc*roadPenalty;
    }
    else if(!boost){
        //slow down to speed limit 
        accelRate = -tan(degtorad((0.7)*(1.5-friction)));
    }
}
else{
    accelRate = -tan(degtorad((0.7)*(1.5-friction)));
}
if(background_vspeed[0] &gt; 0){
    global.distance += spd*pixelDistance/10000;
    global.totalDistance += spd*pixelDistance/10000;
}
/************ Car pitch ************/
var pitch = 0;
if (spd &lt; 0.1 &amp;&amp; gear &gt; 1) {gear = 1;}
gear = clamp(gear,1,6);
sound = audio_play_sound(snd_car,1,false);
audio_sound_pitch(sound,(spd/5)+0.5);//0.75*((spd*0.5) - floor(0.25*spd))+0.5);
/************ Braking ************/
if(keyboard_check(ord("C"))) {brake = true;} 
if(keyboard_check_released(ord("C"))){brake = false;}
if(brake){
    accelerate = false;
    boost = false;
    spd -= tan(degtorad(2*(5-(friction+2))));
    switch(carType) {
        case 0:
            var o = instance_create(x+4,y,obj_tire_mark);
            if (prevMark[0] != -1) {
                o.to = prevMark[0];
            }
            prevMark[0] = o;
            var o2 = instance_create(x-4,y,obj_tire_mark);
            if (prevMark[1] != -1) {
                o2.to = prevMark[1];
            }
            prevMark[1] = o2;
            break;
        case 1:
            var o = instance_create(x,y,obj_tire_mark);
            if (prevMark[0] != -1) {
                o.to = prevMark[0];
            }
            prevMark[0] = o;
            break;
    }
}
else {
    prevMark[0] = -1;
    prevMark[1] = -1;
}
/************ Boost ************/
if(keyboard_check(ord("X")) &amp;&amp; spd &gt; 0) {boost = true;}
else if(keyboard_check_released(ord("X"))) {boost = false;}
if(!boost){
    if (global.boost &lt; global.maxBoost){
        if(spd &gt; 0 &amp;&amp; y &gt; obj_finish_line.y){
            if(boostRegen &gt;= 10){
                boostRegen = 0;
                global.boost ++;
            }
            else{
                boostRegen ++;
            }
        }
    }
}
else{
    if(global.boost &gt;= 0.5){
        global.boost -= 0.5;
        spd += sin(degtorad(1)*(2.35-friction));
    }
    else{
        boost = false;
    }
}
spd += accelRate;
/************ Gear change ************/
if (spd &gt; 0) {
    var current_spd = round(spd*10);
    if (accelerate) {
        if ((current_spd mod 40 == 0)) {
            if (current_spd div 40 == gear) {
                spd *= 0.9;
                gear += 1;
            }
        }
    }
    else {
        if ((current_spd mod 40 == 0)) {
            if (current_spd div 40 == gear-1) {
                spd *= 1.1;
                gear -= 1;
            }
        }
    }
}
if(spd &lt;= 0) {spd = 0;}
/************ Win ************/
if(y &lt; obj_finish_line.y){
    brake = true;
    condition = 50;
    view_object[0] = -1;
    if(!instance_exists(obj_finish)){
        instance_create(x,y,obj_finish);
    }
}
else{
    view_object[0] = obj_player;
}
/************ Lose ************/
if(health &lt;= 0 &amp;&amp; !instance_exists(obj_finish)){
    brake = true;
    health = 0;
    if(spd == 0){
        if(waitTime &lt; 120){
            waitTime++;
        }
        else{
            if(!instance_exists(obj_game_over)){
                instance_create(0,0,obj_game_over)
            }
        }
    }
}
/************ Unstuck ************
x = clamp(x,obj_wall.x+9,obj_wall2.x-9);
if(instance_place(x,y,obj_wall) || instance_place(x,y,obj_wall2)){
    x = (obj_wall2.x+obj_wall.x)/2;
}
/************ Destroyed ************/
if(condition &lt;= 0){
    instance_destroy();
    instance_create(x,y,obj_player_explosion);
    with(instance_create(x,y,obj_score_ind)){
        score -= 1000;
        health -= 10+(global.difficulty*10);
        word = "1000";
        color = red;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(0,6);
hspeed *= -0.5;
if(invisi &lt;= 0){
    condition -= 2+abs(hspeed)*2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(180,6);
hspeed *= -0.5;
if(invisi &lt;= 0){
    condition -= 2+abs(hspeed)*2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_kinetic">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_hit1,2,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_car(spr_player,carType);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
