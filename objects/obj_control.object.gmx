<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initHighScore();
gearMove = 1;
global.maxSpeed = 18;
global.difficulty = global.startingDifficulty;
global.level = 1;
numberFont = font_add_sprite(spr_number_font,ord("0"),false,0);
global.maxBoost = 100;
global.boost = global.maxBoost;
healthEffect = 0;
turnTime = 3000;
//spawnNextCar = 0;
global.turn = 0;
global.turnType = 1;
global.distance = 0;
global.totalDistance = 0;
global.isMedian = false;
display_set_gui_size(view_wport[0],view_hport[0]);
global.goal = -(10000/pixelDistance)*global.level;
global.time = 0;
global.placement = 0;
blackFade = 90;
global.isBeach = false;
global.weather = 0;
beachSide = 1;
barMove = 128;
odoSprite = font_add_sprite_ext(spr_odo_sprite,"0123456789",false,3);
sndWarning = snd_warning;
instance_create(roadInitialX,global.goal,obj_finish_line);
for(i = 0; i &lt; 3; i ++) {speedMove[i] = 0;}
for(a = 0; a &lt; 8; a ++){scoreMove[a] = 0;}
for(b = 0; b &lt; 6; b ++){totalDistanceMove[b] = 0;}
for(c = 0; c &lt; 3; c ++){difficultyMove[c] = global.difficulty*power(10,2-c);}
fuelColor = white;
initRanking();
alarm[0] = 60;
alarm[1] = 70;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(obj_finish) &amp;&amp; health &lt; 20){
    audio_play_sound(sndWarning,2,false);
    if(fuelColor == white) {
        fuelColor = red;
    }
    else if(fuelColor == red){
        fuelColor = white;
    }
}
else{
    fuelColor = white;
}
alarm[1] = 70;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(global.weather){
    case 0: effect_clear();
            break;
    case 1: effect_create_above(ef_rain,0,0,1,aqua);
            break;
    case 2: effect_create_above(ef_snow,0,0,1,white);
            break;
}
alarm[0] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(vk_escape)) {game_end();}
if(keyboard_check_pressed(vk_f9)){
    screen_save(working_directory+"save.png");
    print(temp_directory);
}
if(turnTime &gt; 0){
    turnTime -= background_vspeed[0];
}
else{
    if(global.turn == 0){
        global.turnType = choose(-1,1);
        global.turn = irandom(50)*global.turnType;
        turnTime = irandom_range(5,9)*400;
    }
    else{
        global.turn = 0;
        global.turnType = 0;
        turnTime = irandom_range(4,9)*1000;
    }
}
/*view_angle = var_wipe(view_angle,global.turn,100,background_vspeed[0]/1000,0);
for(i = 1; i &lt; 8; i++) {background_vspeed[i] = background_vspeed[0];}
if(background_index[0] == bkg_water){
    background_index[2] = bkg_bridge_fence_l;
    background_index[3] = bkg_bridge_fence_r;
    background_x[2] = obj_wall.x-26;
}
else if(background_index[0] == bkg_concrete){
    background_index[2] = bkg_sidewalk_l;
    background_index[3] = bkg_sidewalk_r;
    background_x[2] = obj_wall.x-26;
}
else{
    background_index[2] = bkg_fence;
    background_index[3] = bkg_fence;
    background_x[2] = obj_wall.x;
}*/
health = clamp(health,0,100);
global.boost = clamp(global.boost,0,200);
global.time++;
global.maxSpeed = min((global.difficulty*75) div 9,18);
global.difficulty = clamp(global.difficulty,0.25,2.5);
if(!instance_exists(obj_finish) &amp;&amp; is_array(global.rank)){
    global.srtRank = bubbleSort(global.rank,0,global.maxRank+1);
}
for(r = 0; r &lt;= global.maxRank; r ++){
    if(global.srtRank[r,1] == 0){
        global.placement = r;
    }
}
/******************* Random spawn car *********************/
var miSpawnLocation, maxSpawnLocation;
switch(getRoadWidth(obj_road.image_index)) {
    case 0:
        minSpawnLocation = -46;
        maxSpawnLocation = 46;
        break;
    case 1:
        minSpawnLocation = -70;
        maxSpawnLocation = 46;
        break;
    case -1:
        minSpawnLocation = -46;
        maxSpawnLocation = 70;
        break;
    case 2:
        minSpawnLocation = -94;
        maxSpawnLocation = 46;
        break;
    case -2:
        minSpawnLocation = -46;
        maxSpawnLocation = 94;
        break;
    case 3:
        minSpawnLocation = -148;
        maxSpawnLocation = -48;
        break;
    case -3:
        minSpawnLocation = 48;
        maxSpawnLocation = 148;
        break;
}
var spawnLocation = roadInitialX+irandom_range(minSpawnLocation,maxSpawnLocation);
if(background_vspeed[0] &gt; 2){
    if (irandom(5) &lt; 2) {instance_create(spawnLocation,-32,obj_misc);}
    if(irandom(30-(global.difficulty*3)) == 0){
        instance_create(spawnLocation,-32,obj_car);
    }
    if(irandom(10) &lt; 2){ 
        var spawnRange = irandom(view_xview[0]+view_wview[0]);
        if (!place_meeting(spawnRange,-32,obj_misc)) {
            instance_create(spawnRange,-32,obj_misc);
        }
    }
    if(irandom(100-(global.difficulty*3)) == 0){
        instance_create(spawnLocation,-32,obj_puddle);
    }
}
/******************* Move GUI bars after completing *********************/
if(instance_exists(obj_finish) || instance_exists(obj_game_over)){
    if(barMove &lt; 128){
        barMove++;
    }
}
else if(!instance_exists(obj_ready)){
    if(barMove &gt; 0){
        barMove -= 2;
    }
}
/******************* Pause *********************/
if(keyboard_check_pressed(ord("P"))){
    if (!instance_exists(obj_ready) || !instance_exists(obj_finish)){
        if(!instance_exists(obj_paused)){
            instance_create(0,0,obj_paused);
        }
    }
}
/******************* Move Background *********************/
if(instance_exists(obj_player)){
    background_vspeed[0] = obj_player.spd;
}
else{
    background_vspeed[0] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_delete(global.saveBuffer);
if(file_exists("tempData.txt")){
    file_delete("tempData.txt");
}
addHighScore(score);
if(file_exists(working_directory+"values.ini")){
    ini_open(working_directory+"values.ini");
    for(i = 0; i &lt; 10; i++){
        ini_write_real("Score","HIGHSCORE_"+string(i+1),global.highScore[i,0]);
        ini_write_string("Score","HIGHSCORE_"+string(i+1)+"_NAME",global.highScore[i,1]);
        ini_write_real("Score","HIGHSCORE_"+string(i+1)+"_TYPE",global.carType);
        ini_write_real("Score","HIGHSCORE_"+string(i+1)+"_COLOR",global.carColor);
    }

    ini_close();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xv,yv, wv, hv;
xv = view_xview[0];
yv = view_yview[0];
wv = view_wport[0];
hv = view_hport[0];

var playerSpd, playerGear, playerCondition;
playerSpd = background_vspeed[0];
if(instance_exists(obj_player)){
    playerGear = obj_player.gear;
    playerCondition = obj_player.condition;
}
else{
    playerGear = 1;
    playerCondition = 0;
}
/************************** Score *******************************/
var stringLength = string_length(string(score));
for(var a = 0; a &lt; stringLength; a ++){
    //scoreMove[a] = var_wipe(scoreMove[a],floor(score/power(10,a)),100,0.2,0);
    if(a == 0){ //  First value
        scoreMove[0] = var_wipe(scoreMove[0],floor(score),100,0.5,0);
    }
    else{ //Other Values
        scoreMove[a] = var_wipe(scoreMove[a],round(scoreMove[a-1]) div 10,100,0.2,0);
    }
    draw_sprite_ext(spr_odometer,21+scoreMove[a]*21,((wv/2)-(24+(stringLength*12))+(stringLength*24))-(a*24),0,2,2,0,white,1);
}
/*draw_set_valign(fa_top);
draw_set_halign(fa_right);
for(i = 0; i &lt; array_height_2d(global.rank); i++){
    draw_text_colour(wv,i*15,global.srtRank[i,0],white,white,white,white,1);
}*/
/************************** Health &amp; Boost *******************************/
draw_rectangle_colour(-barMove,115,30-barMove,541,0,0,0,0,false);
var subImage = 0;
for(var i = 0; i &lt; health div 4; i ++){
    if(i &lt; 5) {subImage = 1;}
    else if(i &lt; 12) {subImage = 2;}
    else {subImage = 3;}
    draw_sprite_ext(spr_health_bar,subImage,5-barMove,320-(i*8),2,5,0,white,1);
}
if (healthEffect &lt; 180) {healthEffect += 2} else {healthEffect = 0;}
if(health &gt; 0) {draw_sprite_ext(spr_health_bar,subImage,5-barMove,320-(health div 4)*8,2,5,0,white,sin(degtorad(healthEffect)))}
draw_set_font(global.gameFont);
draw_set_valign(fa_top);
draw_set_halign(fa_left);

draw_text_transformed_colour(30-barMove,320,"FUEL "+script_digit(round(health),3),1.5,1.5,90,fuelColor,fuelColor,fuelColor,fuelColor,1);
draw_text_transformed_colour(30-barMove,532,"BOOST "+script_digit(round(global.boost),3),1.5,1.5,90,white,white,white,white,1);
for(var j = 0; j &lt; global.boost div 4; j ++){
    draw_sprite_ext(spr_health_bar,2,5-barMove,532-((j mod 25)*8),2,5,0,make_colour_rgb(255,255-((j div 25)*128),0),1);
}
/************************** Car Condition *******************************/
draw_rectangle_colour(wv+barMove,337,wv-30+barMove,541,0,0,0,0,false);
for(var k = 0; k &lt; (playerCondition/global.maxCondition)*50; k++){
    draw_sprite_ext(spr_health_bar,0,wv-24+barMove,537-(k*4),2,2,0,white,1);
}
draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
draw_text_transformed_colour(wv-30+barMove,541,"Car",1.5,1.5,90,white,white,white,white,1);
/************************** Dashboard *******************************/
draw_sprite(spr_dashboard,0,0,hv+barMove);
for(var b = 0; b &lt; 5; b++){
    totalDistanceMove[b] = var_wipe(totalDistanceMove[b],(global.totalDistance/power(10,b)),100,0,0.05);
    draw_sprite_ext(spr_odometer,21+totalDistanceMove[b]*21,74-(b*18),hv-30+barMove,1.5,1.5,0,white,1);
}
totalDistanceMove[5] = var_wipe(totalDistanceMove[5],(global.totalDistance/power(10,-1)),100,0,0.05);
draw_set_font(odoSprite);
draw_set_valign(fa_center);
draw_set_halign(fa_middle);
for (var i = 0; i &lt;= 180; i++) {
    if (i mod 30 == 0) {
        draw_text_colour(64+lengthdir_x(45,180-i),hv-66+barMove+lengthdir_y(45,180-i),i,white,white,white,white,1);
    }
}
var line_xx, line_yy;
draw_line_width_colour(64,hv-66+barMove,64+lengthdir_x(30,max(0,180-(background_vspeed[0]*10))),hv-66+barMove+lengthdir_y(30,max(0,180-(background_vspeed[0]*10))),4,red,red);
draw_sprite_ext(spr_odometer,22+(totalDistanceMove[5])*22,100,hv-30+barMove,1.5,1.5,0,white,1);
/************************** Time *******************************
draw_set_valign(fa_top);
draw_set_halign(fa_right);
draw_text_transformed_colour(wv-5,0,string(global.time div 3600)+":"+script_digit((global.time div 60) mod 60,2),2,2,0,white,white,white,white,1);
/************************** Nearest racer *******************************/
var distance = 0;
var time = 0;
var str = "";
var nearest;
var posColor = red;
if (instance_exists(obj_player)) {
    var p = obj_player;
    nearest = instance_nearest(p.x,p.y,obj_npc_racer);
    if (instance_exists(nearest)) {
        distance = abs(nearest.y-p.y)*pixelDistance/10000; //unit in kilometers
        if (p.spd &gt; 0 &amp;&amp; nearest.spd &gt; 0) {
            time = distance/(abs(p.spd-nearest.spd));
            str = string_format(time,1,3)+" s";
        }
        else {
            time = -1; // infinite
            str = "inf";
        }
    }
    else {
        str = "---";
    }
    if (instance_exists(nearest)) {
        var pos = 0;
        if (nearest.y &gt; p.y) {
            pos = 0; //behind
            posColor = green;
        }
        else if (nearest.y &lt; p.y) {
            pos = 1; //ahead
            posColor = red;
        }
        draw_sprite_ext(spr_lead,0,wv-11,280+(40*(1-pos)),2,2,180*pos,posColor,1);
    }
}
else {
    /*nearest = instance_nearest((obj_wall2.x+obj_wall.x)/2,256,obj_npc_racer);
    if (instance_exists(nearest)) {
        distance = abs(nearest.y-256)*pixelDistance/10000; //unit in kilometers
        if (p.spd &gt; 0 || nearest.spd &gt; 0) {
            time = distance*(1/abs(p.spd-nearest.spd));
            str = string_format(time,1,3)+" s";
        }
        else {
            time = -1; // infinite
            str = "inf";
        }
    }*/
    time = -1;
    str = "inf";
}
draw_set_font(global.gameFont);
draw_set_valign(fa_middle);
draw_set_halign(fa_right);
draw_text_transformed_colour(wv,300,str,1,2,0,white,white,white,white,1);
/************************** Odometer *******************************/
gearMove = var_wipe(gearMove,playerGear,100,0.1,false);
draw_sprite(spr_odometer,22+(gearMove*22),102,hv-62+barMove);
draw_set_font(numberFont);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_text_colour(6,hv-62+barMove,round(playerSpd*10),white,white,white,white,1);
/************************** Ranking *******************************/
draw_set_font(global.gameFont);
draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
draw_sprite_ext(spr_ranking,global.placement,wv/2,hv+2+barMove,2,2,0,white,1);
/************************** Level Progress *******************************/
var progress = (((-global.distance/pixelDistance)*10000)/global.goal)*200;
draw_rectangle_colour((wv/2)-100,hv-45+barMove,(wv/2)-100+(min(200,progress)),hv-34+barMove,white,white,white,white,false);
draw_set_valign(fa_bottom);
draw_set_halign(fa_center);
draw_text_colour(wv/2,hv-45+barMove,string(global.distance)+" KM/"+string((-global.goal*pixelDistance)/10000)+" KM",white,white,white,white,1)

draw_rectangle_colour((wv/2)-100,hv-45+barMove,(wv/2)+100,hv-34+barMove,white,white,white,white,true);
/************************** Difficulty *******************************/
for(var c = 0; c &lt; 3; c++){
    if(c == 0){
        difficultyMove[0] = var_wipe(difficultyMove[0],floor(global.difficulty/power(10,-2)),100,0,0.1);
    }
    else{
        difficultyMove[c] = var_wipe(difficultyMove[c],round(difficultyMove[c-1]) div 10,100,0,0.1);
    }
    draw_sprite_ext(spr_odometer,21+difficultyMove[c]*21,wv-32-(c*18),hv-32+barMove,1.5,1.5,0,white,1);
}

/************************** Black Fade *******************************/
draw_set_alpha(sin(degtorad(blackFade)));
draw_rectangle_colour(0,0,wv,hv,0,0,0,0,false);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
