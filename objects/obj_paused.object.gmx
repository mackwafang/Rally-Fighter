<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sur = surface_create(room_width,room_height);
surface_set_target(sur);
with(all){
    event_perform(ev_draw,0);
}
surface_reset_target();
instance_deactivate_all(true);
instance_activate_object(obj_misc);
for(i = 0; i &lt; 8; i++) {background_vspeed[i] = 0;}
maxOptions = 5;
currentOption = 0;
alphaChange = 0;
for(j = 0; j &lt; maxOptions; j++){
    option[j] = false;
    optionString[j] = "";
    optionAlpha[j] = 1;
}
optionString[0] = "Continue";
optionString[1] = "Restart";
optionString[2] = "Title";
optionString[3] = "Quit";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(vk_up)) {currentOption--;}
if(keyboard_check_pressed(vk_down)) {currentOption++;}
if(currentOption &lt; 0) {currentOption = maxOptions-1;}
if(currentOption &gt; maxOptions-1) {currentOption = 0;}
if(keyboard_check_pressed(ord("Z"))){
    switch(currentOption){
        case 0: instance_destroy();
                instance_activate_all();
                break;
        case 1: if(global.stateSaved){
                    instance_destroy();
                    buffer_seek(global.saveBuffer,buffer_seek_start,0);
                    game_load_buffer(global.saveBuffer);
                    buffer_delete(global.saveBuffer);
                    break;
                }
        case 2: score = 0;
                surface_free(sur);
                buffer_delete(global.saveBuffer);
                room_goto(rm_title);
                break;
        case 3: game_end();
                surface_free(sur);
                buffer_delete(global.saveBuffer);
                break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xv,yv, wv, hv;
xv = view_xview[0];
yv = view_yview[0];
wv = view_wport[0];
hv = view_hport[0];
draw_sprite(spr_dashboard,0,0,hv);
draw_set_alpha(0.5);
draw_rectangle_colour(0,0,wv,hv,0,0,0,0,false);
draw_set_alpha(1);
draw_set_font(global.gameFont);
draw_set_valign(fa_bottom);
draw_set_halign(fa_center);
draw_text_transformed_colour(wv/2,200,"Paused",4,4,0,white,white,white,white,1);
draw_roundrect_colour((wv/2)-string_width(optionString[currentOption])-8,216+(currentOption*32),(wv/2)+string_width(optionString[currentOption])+8,248+(currentOption*32),white,white,false);
draw_set_valign(fa_middle);
for(i = 0; i &lt; maxOptions; i++){
    draw_text_transformed_colour(wv/2,232+(i*32),optionString[i],2,2,0,white,white,white,white,optionAlpha[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(sur)){
    draw_surface(sur,0,0);
}
else{
    sur = surface_create(room_width,room_height);
    surface_set_target(sur);
    with(all){
        event_perform(ev_draw,0);
    }
    surface_reset_target();
    instance_deactivate_all(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
